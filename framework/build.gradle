apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'eclipse'
apply plugin: 'checkstyle'
group = "cn.emagsofware"
artifact="framework"

sourceCompatibility = 1.6
targetCompatibility = 1.6
version = '1.0'
tomcatHome ='D:\\java\\apache-tomcat-7.0.42'

//default environment indicator resource directory
def env = System.getProperty("env") ?: "dev"
println "build env=$env"
repositories {
    maven {
		url "http://m2.cubeia.com/nexus/content/groups/public"
       //url "http://192.168.167.16:9090/nexus/content/groups/public/"
    }
}
configurations {
  sshAntTask
  runtime
}

tasks.withType(Compile) {
    options.encoding = "UTF-8"
}

clean << {
	delete files("out");
}



task "create-dirs" << {
    sourceSets*.java.srcDirs*.each { it.mkdirs() }
    sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}

buildscript {
    repositories {
        maven {
            url "http://m2.cubeia.com/nexus/content/groups/public"
        }
    }
	
}
def springVersion="3.2.0.RELEASE"
dependencies {
    sshAntTask fileTree(dir:'config/lib', include:'*.jar')
    runtime fileTree(dir: 'lib', includes: ['*.jar'])
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-webmvc:$springVersion"
    compile "org.springframework:spring-jdbc:$springVersion"
    compile "org.springframework:spring-tx:$springVersion"
    compile "org.springframework:spring-context-support:$springVersion"
	compile 'com.googlecode.xmemcached:xmemcached:1.3.5'
    compile 'commons-io:commons-io:2.2'
    compile 'commons-lang:commons-lang:2.4'
    compile 'commons-codec:commons-codec:1.5'
    compile 'commons-collections:commons-collections:3.2.1'
    compile 'commons-configuration:commons-configuration:1.6'
    compile 'net.sf.json-lib:json-lib:2.4:jdk15'
    compile 'org.codehaus.jackson:jackson-core-asl:1.8.10'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.8.10'
    compile 'opensymphony:sitemesh:2.4.2'
    compile 'org.springframework.data:spring-data-mongodb:1.3.2.RELEASE'
    compile 'com.mysema.querydsl:querydsl-mongodb:2.2.1'
    providedCompile "javax.servlet:servlet-api:2.5"
	providedCompile "javax.servlet.jsp:jsp-api:2.1"
	compile "javax.servlet:jstl:1.2"
    providedCompile "c3p0:c3p0:0.9.1"
    //providedCompile "oracle:oracle:14"
    providedCompile "mysql:mysql-connector-java:5.1.27"
    runtime "cglib:cglib:2.2"
    compile "org.slf4j:slf4j-api:1.6.0"
    compile "org.slf4j:jcl-over-slf4j:1.6.6"
    compile group: 'ch.qos.logback', name: 'logback-core', version: '1.0.7'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.0.7'
    testCompile 'junit:junit:4.8'
}

sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources/$env","src/main/resources/public"]
        }
    }
}
test {
    useTestNG()
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
}

warFile = "$buildDir\\libs\\" + project.name + "-"+ version+ ".war"
war {
	classpath = classpath.filter { File file -> 
		 if(System.getProperty("includeJars") != null || System.getProperty("jars") != null)
			return true;
		else
			!file.name.endsWith( ('jar') ) 
	}
    include '*.jar'
	println "WAR:$warFile";
}

httpPort = 8090
stopPort = 9451

[jettyRun, jettyRunWar]*.with {

    contextPath = 'framework'
	jettyEnvXml =  file("config/jetty/jetty-web.xml");
	webDefaultXml  =  file("config/jetty/jetty-webdefault.xml");
}

def checkStyleResult = "$buildDir/reports/checkstyle/results.xml"
checkstyleMain {
	ignoreFailures = true
    configFile = file("config/checkstyle/emagsoftware_checks.xml")
    reports {
        xml {
            destination checkStyleResult
        }
    }
}

findbugs {
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/reports/findbugs")
        effort = "min"
        reportLevel = "high"
        //excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
    }

ant.taskdef(
  name: 'scp',
  classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
  classpath: configurations.sshAntTask.asPath)

task upload() {
  doLast  {
    ant.scp(
      file: warFile,
      todir: 'root@127.0.0.1:/apps/service/emagsoftware/webapps/EGMGSServe',
	  password:'wkye@789',
      trust: true,sftp:true)
  }
}

task copyToLib(type: Copy) {
    into "$buildDir/lib"
    from configurations.runtime
}

task copyLib(dependsOn: configurations.default, type: Copy) {
    into "$projectDir/lib"
    from configurations.default
}

task deployToTomcat(type: Copy) {
    from war
    into "${tomcatHome}/webapps"
}

task dist(type:Zip){
    from jar.outputs.files
    from war.outputs.files
}


